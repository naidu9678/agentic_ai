{"description":"Autonomous Workflow","user_id":"guestuser@gmail.com","version":"0.0.1","name":"setup_infra_workflow","type":"autonomous","summary_method":"llm","sample_tasks":[],"agents":[{"agent":{"type":"userproxy","config":{"name":"user_proxy","human_input_mode":"NEVER","max_consecutive_auto_reply":30,"system_message":"You are a helpful assistant and run the code which is there in skill provision_virtual_machine\n","is_termination_msg":null,"code_execution_config":"local","default_auto_reply":"TERMINATE","description":"User Proxy Agent Configuration","llm_config":false,"admin_name":"Admin","messages":[],"max_round":100,"speaker_selection_method":"auto","allow_repeat_speaker":true},"user_id":"guestuser@gmail.com","version":"0.0.1","task_instruction":null,"skills":[{"user_id":"guestuser@gmail.com","version":"0.0.1","name":"provision_virtual_machine","content":"import boto3\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\ndef send_email(subject, body, to_email):\n    \"\"\"\n    Sends an email using Gmail SMTP.\n    \n    :param subject: Email subject.\n    :param body: Email body content.\n    :param to_email: Recipient email address.\n    \"\"\"\n    from_email = \"2024mt03062@wilp.bits-pilani.ac.in\"  # Replace with your Gmail address\n    from_password = \"Anp@9678\"  # Use App Password if 2FA enabled\n\n    msg = MIMEMultipart()\n    msg['From'] = from_email\n    msg['To'] = to_email\n    msg['Subject'] = subject\n\n    msg.attach(MIMEText(body, 'plain'))\n\n    try:\n        with smtplib.SMTP('smtp.gmail.com', 587) as server:\n            server.starttls()  # Secure connection\n            server.login(from_email, from_password)\n            text = msg.as_string()\n            server.sendmail(from_email, to_email, text)\n            print(f\"Email sent to {to_email}\")\n    except Exception as e:\n        print(f\"Failed to send email: {e}\")\n\ndef provision_virtual_machine():\n    \"\"\"\n    Launches an EC2 instance with predefined constants and retrieves its public IP, Public DNS, and Login Username.\n    \n    :return: Dictionary containing the Public IP, Public DNS, and Login Username, or None if an error occurs.\n    \"\"\"\n    # Constants for EC2 configuration\n    REGION = 'us-east-1'\n    AWS_ACCESS_KEY = 'AKIAUYPNA4JPTKMDKU6J'\n    AWS_SECRET_KEY = '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'\n    INSTANCE_TYPE = 't2.micro'\n    IMAGE_ID = 'ami-0df8c184d5f6ae949'\n    MIN_COUNT = 1\n    MAX_COUNT = 1\n    DEFAULT_LOGIN_USERNAME = 'ec2-user'  # Update based on your AMI type\n\n    try:\n        # Connect to EC2\n        ec2 = boto3.client('ec2',\n                           region_name=REGION,\n                           aws_access_key_id=AWS_ACCESS_KEY,\n                           aws_secret_access_key=AWS_SECRET_KEY)\n        \n        # Launch the instance\n        response = ec2.run_instances(\n            InstanceType=INSTANCE_TYPE,\n            MaxCount=MAX_COUNT,\n            MinCount=MIN_COUNT,\n            ImageId=IMAGE_ID\n        )\n        \n        # Extract instance ID\n        instance_id = response['Instances'][0]['InstanceId']\n        print(f\"EC2 instance launched successfully! Instance ID: {instance_id}\")\n        \n        # Wait for the instance to be in the running state\n        print(\"Waiting for the instance to be in the 'running' state...\")\n        ec2_resource = boto3.resource('ec2',\n                                       region_name=REGION,\n                                       aws_access_key_id=AWS_ACCESS_KEY,\n                                       aws_secret_access_key=AWS_SECRET_KEY)\n        instance = ec2_resource.Instance(instance_id)\n        instance.wait_until_running()\n        \n        # Refresh instance attributes\n        instance.reload()\n        \n        # Retrieve the public IP and Public DNS\n        public_ip = instance.public_ip_address\n        public_dns = instance.public_dns_name\n        \n        print(f\"Public IP of instance {instance_id}: {public_ip}\")\n        print(f\"Public DNS of instance {instance_id}: {public_dns}\")\n        print(f\"Default Login Username: {DEFAULT_LOGIN_USERNAME}\")\n        \n        # Send email with the details\n        email_subject = \"EC2 Instance Provisioned\"\n        email_body = f\"Your EC2 instance (ID: {instance_id}) has been provisioned successfully.\\n\\n\" \\\n                     f\"Public IP: {public_ip}\\nPublic DNS: {public_dns}\\nLogin Username: {DEFAULT_LOGIN_USERNAME}\"\n        send_email(email_subject, email_body, \"naidu9678@gmail.com\")\n        \n        return {\n            'Public IP': public_ip,\n            'Public DNS': public_dns,\n            'Login Username': DEFAULT_LOGIN_USERNAME\n        }\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n","description":"Provision a virtual machine","libraries":[]}],"models":[],"agents":[]},"link":{"agent_type":"sender","workflow_id":8,"sequence_id":0,"agent_id":1}},{"agent":{"type":"assistant","config":{"name":"create_virtual_machine","description":"This is to provision virtual machine","llm_config":{"config_list":[{"model":"open-mistral-7b","api_type":"mistral","api_version":null,"version":"0.0.1","base_url":null}],"temperature":0.1,"timeout":600,"cache_seed":null,"max_tokens":4000},"human_input_mode":"NEVER","max_consecutive_auto_reply":2,"code_execution_config":"local","system_message":"You are a helpful AI assistant. you use provision_virtual_machine skill and get the response.\n\nboto3 is already installed.  execute the function provision_virtual_machine  from the skill provided\n\n\n\n\n"},"user_id":"guestuser@gmail.com","version":"0.0.1","task_instruction":null,"skills":[{"user_id":"guestuser@gmail.com","version":"0.0.1","name":"provision_virtual_machine","content":"import boto3\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\ndef send_email(subject, body, to_email):\n    \"\"\"\n    Sends an email using Gmail SMTP.\n    \n    :param subject: Email subject.\n    :param body: Email body content.\n    :param to_email: Recipient email address.\n    \"\"\"\n    from_email = \"2024mt03062@wilp.bits-pilani.ac.in\"  # Replace with your Gmail address\n    from_password = \"Anp@9678\"  # Use App Password if 2FA enabled\n\n    msg = MIMEMultipart()\n    msg['From'] = from_email\n    msg['To'] = to_email\n    msg['Subject'] = subject\n\n    msg.attach(MIMEText(body, 'plain'))\n\n    try:\n        with smtplib.SMTP('smtp.gmail.com', 587) as server:\n            server.starttls()  # Secure connection\n            server.login(from_email, from_password)\n            text = msg.as_string()\n            server.sendmail(from_email, to_email, text)\n            print(f\"Email sent to {to_email}\")\n    except Exception as e:\n        print(f\"Failed to send email: {e}\")\n\ndef provision_virtual_machine():\n    \"\"\"\n    Launches an EC2 instance with predefined constants and retrieves its public IP, Public DNS, and Login Username.\n    \n    :return: Dictionary containing the Public IP, Public DNS, and Login Username, or None if an error occurs.\n    \"\"\"\n    # Constants for EC2 configuration\n    REGION = 'us-east-1'\n    AWS_ACCESS_KEY = 'AKIAUYPNA4JPTKMDKU6J'\n    AWS_SECRET_KEY = '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'\n    INSTANCE_TYPE = 't2.micro'\n    IMAGE_ID = 'ami-0df8c184d5f6ae949'\n    MIN_COUNT = 1\n    MAX_COUNT = 1\n    DEFAULT_LOGIN_USERNAME = 'ec2-user'  # Update based on your AMI type\n\n    try:\n        # Connect to EC2\n        ec2 = boto3.client('ec2',\n                           region_name=REGION,\n                           aws_access_key_id=AWS_ACCESS_KEY,\n                           aws_secret_access_key=AWS_SECRET_KEY)\n        \n        # Launch the instance\n        response = ec2.run_instances(\n            InstanceType=INSTANCE_TYPE,\n            MaxCount=MAX_COUNT,\n            MinCount=MIN_COUNT,\n            ImageId=IMAGE_ID\n        )\n        \n        # Extract instance ID\n        instance_id = response['Instances'][0]['InstanceId']\n        print(f\"EC2 instance launched successfully! Instance ID: {instance_id}\")\n        \n        # Wait for the instance to be in the running state\n        print(\"Waiting for the instance to be in the 'running' state...\")\n        ec2_resource = boto3.resource('ec2',\n                                       region_name=REGION,\n                                       aws_access_key_id=AWS_ACCESS_KEY,\n                                       aws_secret_access_key=AWS_SECRET_KEY)\n        instance = ec2_resource.Instance(instance_id)\n        instance.wait_until_running()\n        \n        # Refresh instance attributes\n        instance.reload()\n        \n        # Retrieve the public IP and Public DNS\n        public_ip = instance.public_ip_address\n        public_dns = instance.public_dns_name\n        \n        print(f\"Public IP of instance {instance_id}: {public_ip}\")\n        print(f\"Public DNS of instance {instance_id}: {public_dns}\")\n        print(f\"Default Login Username: {DEFAULT_LOGIN_USERNAME}\")\n        \n        # Send email with the details\n        email_subject = \"EC2 Instance Provisioned\"\n        email_body = f\"Your EC2 instance (ID: {instance_id}) has been provisioned successfully.\\n\\n\" \\\n                     f\"Public IP: {public_ip}\\nPublic DNS: {public_dns}\\nLogin Username: {DEFAULT_LOGIN_USERNAME}\"\n        send_email(email_subject, email_body, \"naidu9678@gmail.com\")\n        \n        return {\n            'Public IP': public_ip,\n            'Public DNS': public_dns,\n            'Login Username': DEFAULT_LOGIN_USERNAME\n        }\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n","description":"Provision a virtual machine","libraries":[]}],"models":[{"model":"open-mistral-7b","api_type":"mistral","api_version":null,"user_id":"guestuser@gmail.com","version":"0.0.1","base_url":null,"description":"Mistral model"}],"agents":[]},"link":{"agent_type":"receiver","workflow_id":8,"sequence_id":0,"agent_id":10}}]}